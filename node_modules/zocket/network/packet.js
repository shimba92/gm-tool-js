var ByteBuffer = require('bytebuffer');

function ResponsePacket(data) {
    this.data = data;
    this.readByte();
    this.cmdId = this.readShort();
    this.error = this.readByte();
    console.log('Receive - ' + this.cmdId)
}

ResponsePacket.prototype = {
  readByte: function() {
    return this.data.readByte();
  },

  readBool: function() {
    var b = this.data.readByte();
    if (b == 0)
      return false;
    return true;
  },

  readShort: function() {
    return this.data.readShort();
  },

  readInt: function() {
    return this.data.readInt();
  },

  readLong: function() {
    return this.data.readLong();
  },

  readFloat: function() {
    return this.data.readFloat();
  },

  readDouble: function() {
    return this.data.readDouble();
  },

  readString: function() {
    var len = this.data.readShort();
    return this.data.readString(len);
  }
}


function RequestPacket() {
    this.data = new ByteBuffer(0);
}

RequestPacket.prototype = {
  writeByte: function(value) {
    this.data.writeByte(value);
  },

  writeBool: function(value) {
    if (value == true)
      this.data.writeByte(1);
    else
      this.data.writeByte(0);
  },

  writeShort: function(value) {
    this.data.writeShort(value);
  },

  writeInt: function(value) {
    this.data.writeInt(value);
  },

  writeLong: function(value) {
    this.data.writeLong(value);
  },

  writeFloat: function(value) {
    this.data.writeFloat(value);
  },

  writeDouble: function(value) {
    this.data.writeDouble(value);
  },

  writeString: function(string) {
    this.data.writeShort(string.length);
    this.data.writeString(string);
  },

  packBuffer: function() {
    this.controlId = (typeof this.controlId === 'undefined') ? 1 : this.controlId;
    console.log(this.controlId);
    this.packData();
    this.data.flip();
    var buf = new ByteBuffer(0);
    buf.writeUint8(144);
    buf.writeShort(this.data.limit + 3);
    buf.writeByte(this.controlId);
    buf.writeShort(this.cmdId);
    buf.append(this.data);
    buf.flip();
    return buf.toBuffer();
  },
}


module.exports = {
  makeRequestPacket: function(cmdId, packData) {
    var that = new RequestPacket();
    that.cmdId = cmdId;
    that.packData = packData;
    return that;
  },

  makeResponsePacket: function(response, unpack) {
    unpack.apply(response);
    return response;
  },

  getResponsePacket: function(data) {
    return new ResponsePacket(data);
  }
}
